@model MusicApp.Models.MusicViewModel
@{
    ViewBag.Title = "Details";
    int index = 0;
}
@Scripts.Render("~/Scripts/global.js")
<!DOCTYPE html>
<html>
<head>
    <link href="~/Assets/css/artist2.css" rel="stylesheet" />
    <style>

        .wave-bar {
            width: 3px;
            height: 8px;
            background-color: #1ed760;
            animation: wave-animation 0.6s infinite ease-in-out;
        }

            /* Tạo độ cao khác nhau cho các cột */
            .wave-bar:nth-child(1) {
                animation-delay: 0.1s;
                height: 8px;
            }

            .wave-bar:nth-child(2) {
                animation-delay: 0.2s;
                height: 12px;
            }

            .wave-bar:nth-child(3) {
                animation-delay: 0.3s;
                height: 8px;
            }

        /* Hiệu ứng chuyển động */
        @@keyframes wave-animation {
            0%, 100% {
                transform: scaleY(1);
            }

            50% {
                transform: scaleY(1.5);
            }
        }

        .btnPlay_Pause {
            color: #1ed760;
            font-size: 28px;
            line-height: 0;
            font-size: 60px
        }

            .btnPlay_Pause:hover {
                transform: scale(1.05);
                border-radius: 50px;
                color: #3be477;
                font-size: 28px;
                line-height: 0;
                font-size: 60px
            }

        .track-index {
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
    </style>

</head>
<body>
    <div class="gradient_background" style="display: flex; flex-direction: column;max-height:100%; max-width:100%">
        <div style="display:flex; position:relative; width:100%; height:40%">
            <div class="image-container" style="height: 100%; width: 100%; overflow: hidden ">
                <img id="bgArtist" src="~/Assets/img/jungkook.jpg" alt="Jungkook_img" class="fade-out-image" style="width: 100%; height: 100%;" />
            </div>


            <div style="position: absolute; margin-left: 20px; padding-top: 110px;">
                <h1 style="color:white; font-weight: bold; font-size:100px">@Model.Singers</h1>
                <p style="color:white; font-size:15px">19,576,629 monthly listeners</p>
            </div>
        </div>


        <div style="background-color: rgba(25, 20, 20,0.2);padding-top:30px; padding-left: 20px; width: 100%; display: flex; gap: 30px; max-width: 100%; flex-direction: column; height:100%">
            <div style="display: flex; align-items: center; gap: 30px; width:100%">
                <i id="toggleIcon" class="bi bi-play-circle-fill btnPlay_Pause" style="background-color: #121212; border-radius:50%" onclick="changeIcon(this)"></i>
                <button class="btn btn-outline-light follow-btn">Follow</button>
                <i class="bi bi-three-dots" style="color: #b3b3b3"></i>
            </div>

            <div style=" width: 100%">
                <h2 style="color:white">Popular</h2>
                @foreach (var song in Model.Songs)
                {
                    if (song.SingerName == "JungKook")
                    {
                        <div id="song-@index" data-index="@index" class="row g-0 popular-track track-container" data-song='@Html.Raw(Json.Encode(song))' onclick="togglePlayPause(this)" style="font-size:1rem; display:flex; align-items:center; cursor:pointer;" onmouseenter="showIcon(this)" onmouseleave="resetIcon(this)">
                            <div class="col-11 col-sm-8" style="display:flex; gap:16px; align-items:center;">
                                <div style="color: #b3b3b3;" class="track-index">
                                    <p class="index-text" style="margin-top:1em">@((index + 1))</p>
                                    <i class="bi bi-play-fill d-none"></i>
                                    <i class="bi bi-pause-fill d-none"></i>
                                    <div class="bar-wave d-none" style="display: flex; gap: 2px; align-items: center;">
                                        <i class="wave-bar"></i>
                                        <i class="wave-bar"></i>
                                        <i class="wave-bar"></i>
                                    </div>
                                </div>
                                <div style="height:40px; width:40px;">
                                    <img src="@Url.Content("~/Public/Images/" + song.SongThumbnail)" class="rounded-1" style="height: 100%; width: 100%;" alt="..." />
                                </div>
                                <span class="titleSong" style="color:white;">@song.SongTitle</span>
                            </div>
                            <div class="col-3 d-none d-sm-block viewSong" style="color: #b3b3b3;">@song.Views</div>
                            <div class="col-1 durationSong" style="color: #b3b3b3;">@song.Duration</div>
                        </div>
                        index++;
                    }
                }

            </div>
        </div>
    </div>

    <script>


        $(document).ready(function () {
            const image = $(".fade-out-image"); // Sử dụng jQuery để tìm ảnh
            const fadeOutContainer = $(".fade-out-container");

            fadeOutContainer.on("scroll", function () {
                const scrollTop = fadeOutContainer.scrollTop(); // Lấy vị trí cuộn của div

                const fadePoint = 250; // Điều chỉnh giá trị này theo nhu cầu


                if (scrollTop < fadePoint) {
                    const scale = 1.1 - (scrollTop / (fadePoint * 10));
                    const opacity = 1 - scrollTop / fadePoint;
                    image.css({
                        "opacity": opacity,
                        "transform": `scale(${scale})` // Áp dụng scale
                    });
                } else {
                    image.css({
                        "opacity": 0,

                        "transform": "scale(0.9)" // Kích thước nhỏ nhất khi cuộn đến fadePoint
                    });
                }
            });
            var colorThief = new ColorThief();
            var img = document.getElementById('bgArtist');
            img.setAttribute('crossOrigin', '');

            // When the image is loaded, extract the color
            $(img).on('load', function () {
                var result = colorThief.getColor(img);
                var rgbColor = 'rgb(' + result[0] + ',' + result[1] + ',' + result[2] + ')';
                console.log('run')
                // Apply the background gradient using the dominant color
                $('.gradient_background').css('background', 'linear-gradient(180deg, ' + rgbColor + ' 0%, #191414 100%)');
            });

            // If the image is already loaded (in case of cached images)
            if (img.complete) {
                $(img).trigger('load');
            }
        });
        function showIcon(element) {
            const playIcon = element.querySelector(".track-index .bi-play-fill");
            const pauseIcon = element.querySelector(".track-index .bi-pause-fill");
            const indexText = element.querySelector(".track-index .index-text");
            const waveIcon = element.querySelector(".track-index .bar-wave");

            if (element === currentPlaying && !audio.paused) {
                // Nếu div đang phát, hiển thị icon "pause"
                indexText.classList.add("d-none");
                playIcon.classList.add("d-none");
                pauseIcon.classList.remove("d-none");
                waveIcon.classList.add("d-none");
            } else {
                // Nếu div chưa phát, hiển thị icon "play"
                indexText.classList.add("d-none");
                playIcon.classList.remove("d-none");
                waveIcon.classList.add("d-none");
                pauseIcon.classList.add("d-none");
            }
        }

        function resetIcon(element) {
            const playIcon = element.querySelector(".track-index .bi-play-fill");
            const pauseIcon = element.querySelector(".track-index .bi-pause-fill");
            const indexText = element.querySelector(".track-index .index-text");
            const waveIcon = element.querySelector(".track-index .bar-wave");
            // Nếu là div đang phát, trở về số ban đầu nhưng giữ trạng thái "pause" khi hover lại
            if (element === currentPlaying && !audio.paused) {
                indexText.classList.add("d-none");
                playIcon.classList.add("d-none");
                pauseIcon.classList.add("d-none");
                waveIcon.classList.remove("d-none");
            } else {
                // Nếu không, hiển thị lại số và ẩn icon "play"
                indexText.classList.remove("d-none");
                playIcon.classList.add("d-none");
                pauseIcon.classList.add("d-none");
                waveIcon.classList.add("d-none");
            }
        }
            // Store the current song ID
            const $toggleButton = $('#toggleIcon');
            const test = $('#musicPlayerFooter');
            currentSongId = null;
        let currentPlaying = null;
        let currentElement = null;
        let currentSelected = null;
        function togglePlayPause(element) {
            const playIcon = element.querySelector(".track-index .bi-play-fill");
            const pauseIcon = element.querySelector(".track-index .bi-pause-fill");
            const indexText = element.querySelector(".track-index .index-text");
            const waveIcon = element.querySelector(".track-index .bar-wave");
            const titleSong = element.querySelector(".titleSong");
            // Nếu hiện tại là div đang phát
            if (currentPlaying && currentPlaying !== element) {
                const currentPlayIcon = currentPlaying.querySelector(".track-index .bi-play-fill");
                const currentPauseIcon = currentPlaying.querySelector(".track-index .bi-pause-fill");
                const currentIndexText = currentPlaying.querySelector(".track-index .index-text");
                const currentwaveIcon = currentPlaying.querySelector(".track-index .bar-wave");
                const currenttitleSong = currentPlaying.querySelector(".titleSong");
                // Chuyển trạng thái bài hát đang phát về số ban đầu
                currentPauseIcon.classList.add("d-none");
                currentPlayIcon.classList.add("d-none");
                currentIndexText.classList.remove("d-none");
                currentwaveIcon.classList.add("d-none");
                currenttitleSong.style.color = "white";
                currentIndexText.style.color = "white";
            }

            // Cập nhật trạng thái cho bài hát mới được phát
            if (currentPlaying === element && !audio.paused) {
                const currenttitleSong = currentPlaying.querySelector(".titleSong");
                // Nếu bài đang phát được nhấn lại, dừng phát
                $(document).trigger('pauseSong');
                $('#toggleIcon').removeClass('bi-pause-circle-fill').addClass('bi-play-circle-fill');
                pauseIcon.classList.add("d-none");
                playIcon.classList.remove("d-none");
                indexText.classList.add("d-none");
                waveIcon.classList.add("d-none");
                currentPlaying = null;
            } else {
                if (currentElement && currentElement !== element) {
                    sessionStorage.clear();
                }
                if (currentSelected) {
                    const currenttitleSong = currentSelected.querySelector(".titleSong");
                    const currentIndexText = currentSelected.querySelector(".track-index .index-text");
                    currenttitleSong.style.color = "white";
                    currentIndexText.style.color = "white";
                }
                $('#toggleIcon').removeClass('bi-play-circle-fill').addClass('bi-pause-circle-fill');
                playIcon.classList.add("d-none");
                pauseIcon.classList.remove("d-none");
                indexText.classList.add("d-none");
                waveIcon.classList.add("d-none");
                titleSong.style.color = "#3be477";
                indexText.style.color = "#3be477";

                // Update currentPlaying and currentElement
                currentPlaying = element;
                currentElement = element;
                currentSelected = element;
            }


            window.listSong = @Html.Raw(Json.Encode(Model.Songs.Where(x=>x.SingerName=="JungKook")));
            window.songIndex = parseInt(currentPlaying.getAttribute("data-index")) ;
            const song = JSON.parse(currentPlaying.getAttribute("data-song"));
            const songTitle = song.SongTitle;
            const artistName = song.SingerName;
            const albumArt = song.SongThumbnail;
            const songSrc = song.SongSrc.trimEnd();
            const songId = song.SongId; // Unique ID for the song
            const songData = {
                id: songId,
                title: song.SongTitle,
                artist: song.SingerName,
                albumArt: song.SongThumbnail,
                src: song.SongSrc
            }

            if (songId === currentSongId && !audio.paused) {
                    // Nếu bài hát đang phát, tạm dừng
                $(document).trigger('pauseSong');

            } else {
                sessionStorage.setItem('currentSong', JSON.stringify(songData));
                currentSongId = songId;
                $(document).trigger('playSong');
            }


            $(document).on('footerSongPaused', function () {
                $('#toggleIcon').removeClass('bi-pause-circle-fill').addClass('bi-play-circle-fill');
                currentPlaying = currentElement;
                console.log(currentPlaying);
                const playIcon = currentPlaying.querySelector(".track-index .bi-play-fill");
                const pauseIcon = currentPlaying.querySelector(".track-index .bi-pause-fill");
                const waveIcon = currentPlaying.querySelector(".track-index .bar-wave");
                const indexText = currentPlaying.querySelector(".track-index .index-text");

                    // Đặt lại trạng thái bài hát đang phát
                pauseIcon.classList.add("d-none");
                playIcon.classList.add("d-none");
                waveIcon.classList.add("d-none");
                indexText.classList.remove("d-none");
            });

            $(document).on('footerSongPlaying', function () {

                $('#toggleIcon').removeClass('bi-play-circle-fill').addClass('bi-pause-circle-fill');
                currentPlaying = currentElement;
                const playIcon = currentPlaying.querySelector(".track-index .bi-play-fill");
                const pauseIcon = currentPlaying.querySelector(".track-index .bi-pause-fill");
                const waveIcon = currentPlaying.querySelector(".track-index .bar-wave");
                const indexText = currentPlaying.querySelector(".track-index .index-text");
                const titleSong = currentPlaying.querySelector(".titleSong");

                // Update current song's appearance
                pauseIcon.classList.add("d-none");
                playIcon.classList.add("d-none");
                waveIcon.classList.remove("d-none");
                indexText.classList.add("d-none");
                titleSong.style.color = "#3be477";
                indexText.style.color = "#3be477";
            });


        }

        function changeIcon(icon) {
            //icon.classList.toggle('bi-play-circle-fill');
            //icon.classList.toggle('bi-pause-circle-fill');
            if (currentElement) {
                togglePlayPause(currentElement); // Gọi hàm togglePlayPause cho bài hát hiện tại
            } else {
                sessionStorage.clear();
                const firstItem = document.querySelector('.track-container');
                if (firstItem) {
                    togglePlayPause(firstItem);
                }
            }
        }



    </script>
</body>
</html>